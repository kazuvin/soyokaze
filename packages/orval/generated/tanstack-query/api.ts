/**
 * Generated by orval v7.11.1 🍺
 * Do not edit manually.
 * 猫API
 * PoC of TypeSpec document
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  CatsAddCatInfo200,
  CatsAddCatInfo400,
  CatsAddCatInfo500,
  RegisterCatRequest
} from './model';

import { customInstance } from '../../src/mutator';
import type { ErrorType, BodyType } from '../../src/mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 猫情報をデータベースに登録し、登録結果を返します
 * @summary 猫情報をAPIに登録する
 */
export const catsAddCatInfo = (
  registerCatRequest: BodyType<RegisterCatRequest>,
  options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {


  return customInstance<CatsAddCatInfo200>(
    {
      url: `/cats/new`, method: 'POST',
      headers: { 'Content-Type': 'application/json', },
      data: registerCatRequest, signal
    },
    options);
}



export const getCatsAddCatInfoMutationOptions = <TError = ErrorType<CatsAddCatInfo400 | CatsAddCatInfo500>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof catsAddCatInfo>>, TError, { data: BodyType<RegisterCatRequest> }, TContext>, request?: SecondParameter<typeof customInstance> }
  ): UseMutationOptions<Awaited<ReturnType<typeof catsAddCatInfo>>, TError, { data: BodyType<RegisterCatRequest> }, TContext> => {

  const mutationKey = ['catsAddCatInfo'];
  const { mutation: mutationOptions, request: requestOptions } = options ?
    options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey, }, request: undefined };




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof catsAddCatInfo>>, { data: BodyType<RegisterCatRequest> }> = (props) => {
    const { data } = props ?? {};

    return catsAddCatInfo(data, requestOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type CatsAddCatInfoMutationResult = NonNullable<Awaited<ReturnType<typeof catsAddCatInfo>>>
export type CatsAddCatInfoMutationBody = BodyType<RegisterCatRequest>
export type CatsAddCatInfoMutationError = ErrorType<CatsAddCatInfo400 | CatsAddCatInfo500>

/**
* @summary 猫情報をAPIに登録する
*/
export const useCatsAddCatInfo = <TError = ErrorType<CatsAddCatInfo400 | CatsAddCatInfo500>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof catsAddCatInfo>>, TError, { data: BodyType<RegisterCatRequest> }, TContext>, request?: SecondParameter<typeof customInstance> }
    , queryClient?: QueryClient): UseMutationResult<
      Awaited<ReturnType<typeof catsAddCatInfo>>,
      TError,
      { data: BodyType<RegisterCatRequest> },
      TContext
    > => {

  const mutationOptions = getCatsAddCatInfoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
}

