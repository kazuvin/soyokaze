openapi: 3.0.3
info:
  title: Soyokaze API
  description: API for Soyokaze mobile application
  version: 1.0.0
  contact:
    name: Soyokaze Team
    email: contact@soyokaze.app
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server

paths:
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a user by their unique identifier
      operationId: getUserById
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user by ID
      description: Update an existing user with the provided information
      operationId: updateUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete user by ID
      description: Delete an existing user
      operationId: deleteUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getUsers
      tags:
        - users
      parameters:
        - name: limit
          in: query
          required: false
          description: Maximum number of users to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          required: false
          description: Number of users to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    description: Total number of users
                  limit:
                    type: integer
                    description: Maximum number of users returned
                  offset:
                    type: integer
                    description: Number of users skipped
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new user
      description: Create a new user with the provided information
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists (email conflict)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        name:
          type: string
          description: User's full name
          example: "John Doe"
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: URL to user's avatar image
          example: "https://example.com/avatar.jpg"
        bio:
          type: string
          nullable: true
          description: User's biography
          example: "Software developer from Tokyo"
        created_at:
          type: string
          format: date-time
          description: When the user was created
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the user was last updated
          example: "2023-01-01T00:00:00Z"
        last_login:
          type: string
          format: date-time
          nullable: true
          description: When the user last logged in
          example: "2023-01-01T00:00:00Z"
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "USER_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "User with ID 123e4567-e89b-12d3-a456-426614174000 was not found"
        details:
          type: object
          nullable: true
          description: Additional error details
          additionalProperties: true

    CreateUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "newuser@example.com"
        name:
          type: string
          description: User's full name
          example: "Jane Doe"
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: URL to user's avatar image
          example: "https://example.com/avatar.jpg"
        bio:
          type: string
          nullable: true
          description: User's biography
          example: "Product manager and designer"
        is_active:
          type: boolean
          description: Whether the user account should be active
          default: true
          example: true

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "updated@example.com"
        name:
          type: string
          description: User's full name
          example: "Jane Smith"
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: URL to user's avatar image
          example: "https://example.com/new-avatar.jpg"
        bio:
          type: string
          nullable: true
          description: User's biography
          example: "Senior product manager"
        is_active:
          type: boolean
          description: Whether the user account is active
          example: false

  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: User ID
      schema:
        type: string
        format: uuid

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: users
    description: User management operations